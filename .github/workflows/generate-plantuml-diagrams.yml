name: Generate PlantUML Diagrams
on:
  pull_request:
    paths:
      - '**.puml'
jobs:
  generate:
    runs-on: ubuntu-latest
    env:
        UML_FILES: ".puml"
    steps:
      - name: Checkout Source 
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get changed UML files
        id: getfile
        run: |
          echo "::set-output name=files::$(find | grep ${{ env.UML_FILES }} | xargs)"
      - name: UML files considered echo output
        run: |
          echo ${{ steps.getfile.outputs.files }}
      - name: Generate SVG Diagrams
        uses: cloudbees/plantuml-github-action@master
        with:
            args: -v -tsvg ${{ steps.getfile.outputs.files }}
      - name: Generate PNG Diagrams
        uses: cloudbees/plantuml-github-action@master
        with:
            args: -v -tpng ${{ steps.getfile.outputs.files }}
      - name: Stage Local Changes to Commit
        run:
          echo COMMIT=$(git status | grep "nothing to commit, working tree clean")
          echo COMMIT=$(git status | grep "nothing to commit, working tree clean") >> $GITHUB_ENV
          git status;
          git add *;
          git status;
      - name: Commit PlantUML Diagrams
        if: ${{ env.COMMIT }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Generate SVG and PNG Images for PlantUML Diagrams
      - name: Get the checkstyle Results to Propagate
        run:
          curl https://api.github.com/repos/andrewdimmer/csi-3370-software-project-config-test/commits/$(git rev-parse HEAD~1)/check-runs > check_runs.json
          cat check_runs.json | python3 .github/github_action_workflow_to_job_id.py "checkstyle" "id" > checkstyle_job_run_id.txt;
          echo checkstyle Job Run Id $(cat checkstyle_job_run_id.txt);
          echo CHECKSTYLE_JOB_RUN_ID=$(cat checkstyle_job_run_id.txt) >> $GITHUB_ENV;
          cat check_runs.json | python3 .github/github_action_workflow_to_job_id.py "checkstyle" "conclusion" > checkstyle_job_run_conclusion.txt;
          echo checkstyle Conclusion $(cat checkstyle_job_run_conclusion.txt);
          echo CHECKSTYLE_CONCLUSION=$(cat checkstyle_job_run_conclusion.txt) >> $GITHUB_ENV;
          echo New SHA $(git rev-parse HEAD);
          echo NEW_SHA=$(git rev-parse HEAD) >> $GITHUB_ENV;
      - name: Propagate checkstyle Status to the New Commit
        if: ${{ env.COMMIT }}
        uses: Sibz/github-status-action@v1
        with: 
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: checkstyle
          state: ${{env.CHECKSTYLE_CONCLUSION}}
          sha: ${{env.NEW_SHA}}
          target_url: https://github.com/andrewdimmer/csi-3370-software-project-config-test/runs/${{env.CHECKSTYLE_JOB_RUN_ID}}
